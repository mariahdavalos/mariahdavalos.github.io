{"version":3,"sources":["helpers/utils.ts","images/martalogo.png","components/page/header/Header.tsx","store/atoms/filterSelectionAtom.ts","store/atoms/trainSchedulesAtom.ts","components/common/buttons/FilterButton.tsx","components/common/buttons/SubmitButton.tsx","components/common/filter/Filter.tsx","components/trainSchedule/selectionItems/TrainScheduleSelectionItems.tsx","components/trainSchedule/TrainScheduleContainer.tsx","AppContainer.tsx","index.js"],"names":["getDirection","direction","fullDisplayName","term","filterContainsElement","filterItems","currentItem","some","filter","toLowerCase","filterMatchesElement","filterItem","includes","parseTrainArrivals","trainSchedules","filterSelection","filteredSelection","trainSchedule","lines","LINE","directions","DIRECTION","departure","DESTINATION","arrival","STATION","filterTrainArrivals","map","dest","toUpperCase","dir","line","arrivalTime","NEXT_ARR","arrivalStation","waitTime","WAITING_TIME","getGreeting","time","Date","getHours","greeting","timeSummary","today","locale","toLocaleTimeString","hour","hour12","minute","Header","useState","setDate","useEffect","timer","setInterval","clearInterval","className","src","logo","alt","filterSelectionAtom","atom","key","default","trainSchedulesAtom","FilterButton","onClick","Button","variant","style","color","borderColor","SubmitButton","width","alignSelf","marginRight","marginBottom","backgroundColor","filterDirections","filterLines","generateCheckboxes","formLabel","checkboxValues","setFilterSelection","FormControl","component","FormLabel","FormGroup","row","checkboxValue","FormControlLabel","margin","labelPlacement","control","Checkbox","onChange","updatedValue","updatedFilterSelection","value","updatedFilterCheckboxSelection","checked","label","directionOptions","lineOptions","getLocationInput","locationType","TextField","event","updateFilterInputSelection","target","id","toggleFilter","showFilter","setShowFilter","Filter","useRecoilState","setLines","setDirections","Dialog","PaperProps","boxShadow","border","open","DialogTitle","getSchedule","trains","hideLine","train","TrainScheduleSelectionItems","setHideLine","scheduleSelectionItems","setScheduleSelectionItems","useMemo","TrainScheduleContainer","currentTrainSchedules","setCurrentTrainSchedules","updatedTrainSchedules","setUpdatedTrainSchedules","cursor","marginLeft","length","AppContainer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e98b20c3.chunk.js","sourcesContent":["const getDirection = (direction: string, fullDisplayName: boolean) => {\n    const term = fullDisplayName ? 'bound' : ''\n    switch (direction) {\n        case ('N'):\n            return `North${term}`\n        case ('S'):\n            return `South${term}`\n        case ('E'):\n            return `East${term}`\n        case ('W'):\n            return `West${term}`\n        default:\n            return `¯\\_(ツ)_/¯`\n    }\n}\n\nconst filterContainsElement = (filterItems: string[], currentItem: string) => {\n\n    return filterItems.some((filter: string) => filter === currentItem?.toLowerCase())\n}\n\nconst filterMatchesElement = (filterItem: string, currentItem: string) => {\n    return filterItem === '' || currentItem.toLowerCase().includes(filterItem?.toLowerCase())\n}\n\nconst filterTrainArrivals = (trainSchedules: any, filterSelection: any) => {\n    return trainSchedules.filter((trainSchedule: any) => filterContainsElement(filterSelection.lines, trainSchedule.LINE)\n        && filterContainsElement(filterSelection.directions, getDirection(trainSchedule.DIRECTION, false))\n        && filterMatchesElement(filterSelection.departure, trainSchedule.DESTINATION)\n        && filterMatchesElement(filterSelection.arrival, trainSchedule.STATION))\n}\n\nexport const parseTrainArrivals = (trainSchedules: any, filterSelection?: any) => {\n    let filteredSelection = trainSchedules;\n\n    if (!!filterSelection) {\n        filteredSelection = filterTrainArrivals(filteredSelection, filterSelection)\n    }\n\n    return filteredSelection.map((trainSchedule: any) => { return { dest: trainSchedule.DESTINATION?.toUpperCase(), dir: getDirection(trainSchedule.DIRECTION, true), line: trainSchedule.LINE, arrivalTime: trainSchedule.NEXT_ARR, arrivalStation: trainSchedule.STATION?.toUpperCase(), waitTime: trainSchedule.WAITING_TIME } })\n}\n\n\nexport const getGreeting = () => {\n    const time = new Date().getHours()\n    const greeting = 'Good '\n\n    if (time < 12) {\n        return `${greeting}morning!`\n    } else if (time < 18) {\n        return `${greeting}afternooon!`\n    } else {\n        return `${greeting}evening!`\n    }\n}","export default __webpack_public_path__ + \"static/media/martalogo.204b5aaf.png\";","import './Header.scss'\nimport { getGreeting } from '../../../helpers/utils';\nimport logo from '../../../images/martalogo.png'\n\nimport { useEffect, useState } from 'react';\n\nconst timeSummary = (today: Date, locale: string) => {\n    return today.toLocaleTimeString(locale, { hour: 'numeric', hour12: true, minute: 'numeric' });\n}\n\n// header to show user time and introduction to page\nconst Header = () => {\n    const [today, setDate] = useState(new Date());\n\n    const currentTimeText = 'The time is'\n    const scheduleText = 'On this page you will find our current train schedules in detail.'\n\n\n    // header keeps up to date ever 60 seconds on the time so the user can reference what time it is now\n    // vs the train schedules they're seeing. \n    useEffect(() => {\n        const timer = setInterval(() => {\n            setDate(new Date());\n        }, 60 * 1000);\n        return () => {\n            clearInterval(timer);\n        }\n    }, []);\n\n    return (\n        <div className='header-container'>\n            <img className='header-image' src={logo} alt=\"Logo\" />\n            <div className='header-text-container'>\n                <p className='header-text'>{`${getGreeting()} ${currentTimeText} ${timeSummary(today, 'en')}.`}</p>\n                <p className='header-text'>{scheduleText}</p>\n\n                <div className='yellow-divider' />\n            </div>\n        </div>\n    )\n}\n\nexport default Header","import { atom } from 'recoil';\n\nexport const defaultFilterSelection = {\n    arrival: '',\n    departure: '',\n    lines: ['red', 'blue', 'gold', 'green'],\n    directions: ['north', 'south', 'east', 'west']\n}\n\nexport const filterSelectionAtom = atom({\n    key: 'filterSelection',\n    default: defaultFilterSelection\n})","import { atom } from 'recoil';\n\nexport const defaultTrainSchedules = [{\n    \"DESTINATION\": \"Hamilton E Holmes\", \"DIRECTION\": \"W\", \"EVENT_TIME\": \"12\\/27\\/2013 12:29:42 PM\", \"LINE\": \"BLUE\", \"NEXT_ARR\": \"12:29:52 PM\", \"STATION\": \"VINE CITY STATION\", \"TRAIN_ID\": \"101206\", \"WAITING_SECONDS\": \"-31\"\n    , \"WAITING_TIME\": \"Boarding\"\n}, {\n    \"DESTINATION\": \"Airport\",\n    \"DIRECTION\": \"S\", \"EVENT_TIME\": \"12\\/27\\/2013 12:30:06 PM\", \"LINE\": \"GOLD\", \"NEXT_ARR\": \"12:30:16 PM\", \"STATION\": \"GARNETT STATION\", \"TRAIN_ID\": \"302506\", \"WAITING_SECONDS\": \"-7\",\n    \"WAITING_TIME\": \"Boarding\"\n}, {\"DESTINATION\":\"North Springs\",\"DIRECTION\":\"N\",\"EVENT_TIME\":\"10/04/2021 8:46:06 AM\",\"LINE\":\"RED\",\"NEXT_ARR\":\"8:48:48 AM\",\"STATION\":\"SANDY SPRINGS STATION\",\"TRAIN_ID\":\"407306\",\"WAITING_SECONDS\":\"114\",\"WAITING_TIME\":\"1 min\"},\n{\"DESTINATION\":\"North Springs\",\"DIRECTION\":\"N\",\"EVENT_TIME\":\"10/04/2021 8:46:06 AM\",\"LINE\":\"RED\",\"NEXT_ARR\":\"8:51:24 AM\",\"STATION\":\"NORTH SPRINGS STATION\",\"TRAIN_ID\":\"407306\",\"WAITING_SECONDS\":\"270\",\"WAITING_TIME\":\"4 min\"},\n{\"DESTINATION\":\"Airport\",\"DIRECTION\":\"S\",\"EVENT_TIME\":\"10/04/2021 8:46:43 AM\",\"LINE\":\"GOLD\",\"NEXT_ARR\":\"8:48:32 AM\",\"STATION\":\"COLLEGE PARK STATION\",\"TRAIN_ID\":\"307506\",\"WAITING_SECONDS\":\"98\",\"WAITING_TIME\":\"1 min\"},\n{\"DESTINATION\":\"Airport\",\"DIRECTION\":\"S\",\"EVENT_TIME\":\"10/04/2021 8:46:43 AM\",\"LINE\":\"GOLD\",\"NEXT_ARR\":\"8:50:39 AM\",\"STATION\":\"AIRPORT STATION\",\"TRAIN_ID\":\"307506\",\"WAITING_SECONDS\":\"225\",\"WAITING_TIME\":\"3 min\"},\n{\"DESTINATION\":\"Airport\",\"DIRECTION\":\"S\",\"EVENT_TIME\":\"10/04/2021 8:46:02 AM\",\"LINE\":\"RED\",\"NEXT_ARR\":\"8:49:27 AM\",\"STATION\":\"OAKLAND CITY STATION\",\"TRAIN_ID\":\"401506\",\"WAITING_SECONDS\":\"153\",\"WAITING_TIME\":\"2 min\"},\n{\"DESTINATION\":\"Doraville\",\"DIRECTION\":\"N\",\"EVENT_TIME\":\"10/04/2021 8:46:34 AM\",\"LINE\":\"GOLD\",\"NEXT_ARR\":\"9:12:53 AM\",\"STATION\":\"DORAVILLE STATION\",\"TRAIN_ID\":\"304326\",\"WAITING_SECONDS\":\"1559\",\"WAITING_TIME\":\"25 min\"},\n{\"DESTINATION\":\"Bankhead\",\"DIRECTION\":\"W\",\"EVENT_TIME\":\"10/04/2021 8:46:12 AM\",\"LINE\":\"GREEN\",\"NEXT_ARR\":\"8:48:05 AM\",\"STATION\":\"VINE CITY STATION\",\"TRAIN_ID\":\"202252\",\"WAITING_SECONDS\":\"71\",\"WAITING_TIME\":\"1 min\"},]\n\nexport const trainSchedulesAtom = atom({\n    key: 'trainSchedules',\n    default: defaultTrainSchedules\n})","import Button from '@mui/material/Button';\n\nconst FilterButton = ({ onClick }: { onClick: any }) => {\n    return <Button onClick={() => onClick()} variant=\"outlined\" style={{ color: '#CCCCCC', borderColor: '#0092D0' }}>Filter By Details</Button>\n}\n\nexport default FilterButton;","import Button from '@mui/material/Button';\n\nconst SubmitButton = ({ onClick }: { onClick: any }) => {\n    return <Button onClick={() => onClick()} variant=\"outlined\" style={{\n        width: '7.5rem',\n        alignSelf: 'flex-end',\n        marginRight: '1.5rem',\n        marginBottom: '1.5rem',\n        backgroundColor: '#FF7500',\n        borderColor: '#FF7500',\n        color: '#212121'\n    }}>OK</Button>\n}\n\nexport default SubmitButton;","import { useEffect, useState } from \"react\";\nimport { useRecoilState } from \"recoil\";\nimport FormGroup from '@mui/material/FormGroup';\nimport FormControl from '@mui/material/FormControl';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormLabel from '@mui/material/FormLabel';\nimport TextField from '@mui/material/TextField';\nimport Dialog from '@mui/material/Dialog';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport Checkbox from '@mui/material/Checkbox';\n\n\nimport FilterButton from \"../buttons/FilterButton\";\nimport { filterSelectionAtom } from \"../../../store/atoms/filterSelectionAtom\";\nimport './Filter.scss'\nimport SubmitButton from \"../buttons/SubmitButton\";\n\n\nconst filterDirections = ['North', 'South', 'East', 'West'];\nconst filterLines = ['Red', 'Gold', 'Blue', 'Green'];\n\nconst updatedFilterCheckboxSelection = (updatedValue: string, filter: string, filterSelection: any, setFilterSelection: any) => {\n    let updatedFilterSelection = { ...filterSelection }\n\n    if (filterSelection[filter].some((value: string) => value === updatedValue.toLowerCase())) {\n        updatedFilterSelection[filter as any] = filterSelection[filter].filter((value: string) => value !== updatedValue.toLowerCase())\n    } else {\n        updatedFilterSelection[filter as any] = [...updatedFilterSelection[filter as any], updatedValue.toLowerCase()]\n    }\n\n    setFilterSelection(updatedFilterSelection)\n}\n\nconst updateFilterInputSelection = (updatedValue: string, filter: string, filterSelection: any, setFilterSelection: any) => {\n    let updatedFilterSelection = { ...filterSelection }\n    updatedFilterSelection[filter as any] = updatedValue\n\n    setFilterSelection(updatedFilterSelection)\n}\n\nconst generateCheckboxes = (formLabel: string, checkboxValues: string[], filterSelection: any, setFilterSelection: any) => {\n    return <div className='form' >\n        <FormControl component=\"fieldset\">\n            <FormLabel component=\"legend\">{`${formLabel}: `}</FormLabel>\n            <FormGroup aria-label=\"position\" row>\n                {checkboxValues.map(checkboxValue =>\n                    <FormControlLabel style={{ margin: '10.5px' }}\n                        key={checkboxValue}\n                        labelPlacement=\"bottom\"\n                        control={\n                            <Checkbox\n                                onChange={() => updatedFilterCheckboxSelection(checkboxValue, formLabel.toLowerCase(), filterSelection, setFilterSelection)}\n                                style={{ color: '#FDBE43', width: '1.25rem', margin: '.75rem' }}\n                                checked={filterSelection[formLabel.toLowerCase() as any]?.some((value: any) => value === checkboxValue.toLowerCase())} />}\n                        label={checkboxValue}\n                    />\n                )}\n            </FormGroup>\n        </FormControl>\n    </div>\n}\n\nconst directionOptions = (filterSelection: any, setFilterSelection: any) => {\n    return generateCheckboxes('Directions', filterDirections, filterSelection, setFilterSelection)\n}\n\nconst lineOptions = (filterSelection: any, setFilterSelection: any) => {\n    return generateCheckboxes('Lines', filterLines, filterSelection, setFilterSelection);\n}\n\nconst getLocationInput = (locationType: string, filterSelection: any, setFilterSelection: any) => {\n    return <TextField\n        value={filterSelection[locationType.toLowerCase()]}\n        onChange={(event: any) =>\n            updateFilterInputSelection(event.target.value, locationType.toLowerCase(), filterSelection, setFilterSelection)}\n        style={{ borderColor: 'white', marginBottom: '.5rem' }}\n        id={`${locationType}Location`}\n        label={`${locationType} Location`}\n        variant=\"outlined\" />\n}\n\nconst toggleFilter = (showFilter: boolean, setShowFilter: any) => {\n    setShowFilter(showFilter)\n}\n\n// filter to filter out the schedules on the train schedule container based on train schedule details \n// updates the filter in our recoil state and builds out the actual filter w/checkboxes for lines and \n// directions and inputs for arrival and destination locations. \nconst Filter = () => {\n    const [showFilter, setShowFilter] = useState(false)\n    const [filterSelection, setFilterSelection] = useRecoilState(filterSelectionAtom);\n\n    const [lines, setLines] = useState(lineOptions(filterSelection, setFilterSelection))\n    const [directions, setDirections] = useState(directionOptions(filterSelection, setFilterSelection))\n\n    useEffect(() => {\n        setLines(lineOptions(filterSelection, setFilterSelection));\n        setDirections(directionOptions(filterSelection, setFilterSelection))\n\n    }, [filterSelection, setFilterSelection])\n\n    return <div className='filter-container'>\n        <FilterButton onClick={() => toggleFilter(true, setShowFilter)} />\n\n        <Dialog\n            PaperProps={{\n                style: {\n                    backgroundColor: '#212121',\n                    boxShadow: 'none',\n                    border: '.25rem solid #111111'\n                },\n            }}\n            open={showFilter}>\n            <DialogTitle className='dialog-title'>Filter Options</DialogTitle>\n            <div className='orange-divider' />\n\n            <div className='filter-dialouge'>\n                <div className='location-filter-options'>\n                    {getLocationInput('Arrival', filterSelection, setFilterSelection)}\n                    {getLocationInput('Departure', filterSelection, setFilterSelection)}\n                </div>\n                {lines}\n                {directions}\n            </div>\n\n            <SubmitButton onClick={() => toggleFilter(false, setShowFilter)} />\n        </Dialog>\n    </div >\n}\n\nexport default Filter;","import { useEffect, useMemo, useState } from \"react\";\n\nimport './TrainScheduleSelectionItems.scss'\n\nconst getSchedule = (trains: any, hideLine: boolean) => {\n    if (!trains) return <div />;\n\n    return <div>\n        {trains.map((train: any) =>\n            <div key={train.dest + train.arrivalStation + train.arrivalTime} className='line-item'>\n                <span className='info-container'>\n                    <span className='info-content'>{train.arrivalStation}</span>\n                    <span className='info-content to'>to</span>\n                    <span className='info-content'>{train.dest}</span>\n                </span>\n                <span className='direction-container'>{`( ${train.dir} )`}</span>\n                <span className='fade-container'>\n                    <span className={!hideLine ? 'arrival-text hide-width fade-in' : 'arrival-text show-width fade-in show'}>Arrival: {train.arrivalTime}</span>\n                    <span className={hideLine ? 'fade-in' : 'fade-in show'}>\n                        <span className={`${train.line?.toLowerCase()} line-indicator`} />\n                        <span className='line-text'>{`${train.line} LINE`} </span>\n                    </span>\n                </span>\n            </div>)\n        }\n    </div>\n}\n\n// train schedule selection items. renders each train schedule in a new container\n// and passing the array back to the container.\n// shows line, arrival, destination, direction, and arrival time.\nconst TrainScheduleSelectionItems = ({ trainSchedules }: { trainSchedules: any }) => {\n    const [hideLine, setHideLine] = useState(false)\n    const [scheduleSelectionItems, setScheduleSelectionItems] = useState(getSchedule(trainSchedules, hideLine))\n\n    // animation effect used for showing arrival times and lines in an easing container\n    useEffect(() => {\n        const timer = setInterval(() => {\n            setHideLine(hideLine => !hideLine)\n        }, 2500);\n        return () => {\n            clearInterval(timer);\n        }\n    }, []);\n\n    useMemo(() => { setScheduleSelectionItems(getSchedule(trainSchedules, hideLine)) }, [hideLine, trainSchedules])\n\n    return scheduleSelectionItems\n}\n\nexport default TrainScheduleSelectionItems;","import { useEffect, useMemo, useState } from \"react\"\nimport { useRecoilState } from \"recoil\"\nimport RefreshIcon from '@mui/icons-material/Refresh'\n\nimport { parseTrainArrivals } from \"../../helpers/utils\"\nimport { filterSelectionAtom } from \"../../store/atoms/filterSelectionAtom\"\nimport { trainSchedulesAtom } from \"../../store/atoms/trainSchedulesAtom\"\nimport Filter from \"../common/filter/Filter\"\nimport TrainScheduleSelectionItems from \"./selectionItems/TrainScheduleSelectionItems\"\nimport { fetchTrainSchedules } from '../../api/index'\n\nimport './TrainScheduleContainer.scss'\n\nconst getData = () => process.env.REACT_APP_ENV === 'production'\n\n// container that fetches all the train schedules and renders the filter, refresh, and schedule table itself\n// in development environments w/ proxy, return values from marta's api\n// in production environment, we're going to fake data to work around the mixed content issue\nconst TrainScheduleContainer = () => {\n    const noMatchingSchedulesText = 'No schedules found. Please adjust your filter criteria and try again.'\n\n    // using recoil state management to keep track of the filters and train schedules on the page\n    const [filterSelection] = useRecoilState(filterSelectionAtom);\n    const [currentTrainSchedules, setCurrentTrainSchedules] = useRecoilState(trainSchedulesAtom);\n\n    const [updatedTrainSchedules, setUpdatedTrainSchedules] = useState(parseTrainArrivals(currentTrainSchedules))\n\n    // we only need to fetch this anmount to get the og train schedules and not re-render endlessly\n    // while still being able to refresh everything when needed\n    useMemo(() => {\n        if (!getData()){\n            fetchTrainSchedules().then((trainSchedules: any) => setCurrentTrainSchedules(trainSchedules))\n        }\n    }, [setCurrentTrainSchedules])\n\n    useEffect(() => {\n        setUpdatedTrainSchedules(parseTrainArrivals(currentTrainSchedules, filterSelection))\n    }, [currentTrainSchedules, filterSelection])\n\n    return <div className='train-schedule-container'>\n        <div className='filter-and-refresh'>\n            <Filter /> or\n            <RefreshIcon onClick={() => { \n                //if not development don't fetch from api\n                // if it is, re-fetch our train schedules and update our state\n                if(getData()) return; \n                return fetchTrainSchedules().then((trainSchedules: any) => setCurrentTrainSchedules(trainSchedules))}} style={{ color: '#FDBE43', cursor: 'pointer', marginLeft: '6px' \n            }} />\n        </div>\n        {updatedTrainSchedules.length > 0 ?\n            <TrainScheduleSelectionItems trainSchedules={updatedTrainSchedules} /> :\n            <div className='no-matching'>{noMatchingSchedulesText}</div>}\n    </div>\n\n}\n\nexport default TrainScheduleContainer","import {\n    RecoilRoot\n} from 'recoil';\n\nimport './AppContainer.scss'\nimport Header from './components/page/header/Header'\nimport TrainScheduleContainer from './components/trainSchedule/TrainScheduleContainer';\n\n\nconst AppContainer = () => {\n    return (\n        <RecoilRoot>\n            <Header />\n            <TrainScheduleContainer />\n        </RecoilRoot>\n    );\n}\n\nexport default AppContainer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport AppContainer from './AppContainer';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppContainer />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}